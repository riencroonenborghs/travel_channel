// Generated by CoffeeScript 1.9.3
(function() {
  var app;

  app = angular.module("travelChannel", ["ngAria", "ngAnimate", "ngMaterial", "ngMdIcons"]);

  app.config(function($mdThemingProvider) {
    return $mdThemingProvider.theme("default").primaryPalette("blue").accentPalette("green");
  });

  app.constant("SERVER", "http://www.travelchannel.com");

  app.constant("EPISODES", "/shows/whats-new-on-travel-channel/articles/full-episodes");

  app.service("Channel", [
    "$http", "$q", "SERVER", "EPISODES", "$parse", function($http, $q, SERVER, EPISODES, $parse) {
      return {
        service: {
          episodesList: function() {
            var deferred;
            deferred = $q.defer();
            $http.get(SERVER + EPISODES).then(function(d) {
              var _description, _img, _link, item, links, list;
              links = $(d.data).find("section.topn-wrapper");
              list = (function() {
                var i, len, results;
                results = [];
                for (i = 0, len = links.length; i < len; i++) {
                  item = links[i];
                  item = $(item);
                  _link = $(item.find("h2 a"));
                  _img = $(item.find("img"));
                  _description = $(item.find(".topn-description"))[0].innerText.replace("Watch Full Episodes", "");
                  results.push({
                    url: _link.attr('href'),
                    name: _link.text(),
                    image: _img.attr("src"),
                    description: _description
                  });
                }
                return results;
              })();
              return deferred.resolve(list);
            });
            return deferred.promise;
          },
          episodes: function(episodeItem) {
            var deferred;
            deferred = $q.defer();
            $http.get(SERVER + episodeItem.url).then((function(_this) {
              return function(d) {
                var data, episode, episodes, playlistItem, playlistItems;
                playlistItems = $(d.data).find(".videoplaylist-item");
                episodes = (function() {
                  var i, len, results;
                  results = [];
                  for (i = 0, len = playlistItems.length; i < len; i++) {
                    playlistItem = playlistItems[i];
                    data = $(playlistItem).data().videoplaylistData;
                    episode = {
                      title: data.title,
                      description: data.description,
                      smil: data.releaseUrl,
                      image: SERVER + data.thumbnailUrl,
                      duration: data.duration
                    };
                    results.push(episode);
                  }
                  return results;
                })();
                return deferred.resolve(episodes);
              };
            })(this));
            return deferred.promise;
          },
          videos: function(episode) {
            var deferred;
            deferred = $q.defer();
            $http.get(episode.smil).then(function(d) {
              var _switch, _video, data, height, heightRe, i, index, j, len, len1, list, ref, ref1, src, srcRe, video, width, widthRe;
              list = [];
              data = d.data.replace(/video/g, 'replacedvideo');
              ref = $(data).find("switch");
              for (index = i = 0, len = ref.length; i < len; index = ++i) {
                _switch = ref[index];
                if (index === 0) {
                  ref1 = $(_switch).find("replacedvideo");
                  for (j = 0, len1 = ref1.length; j < len1; j++) {
                    _video = ref1[j];
                    srcRe = /src=\"(.+).mp4\"/;
                    widthRe = /width=\"(\d+)\"/;
                    heightRe = /height=\"(\d+)\"/;
                    video = $(_video)[0].outerHTML;
                    src = srcRe.exec(video)[1];
                    width = widthRe.exec(video)[1];
                    height = heightRe.exec(video)[1];
                    list.push({
                      src: src,
                      width: width,
                      height: height
                    });
                  }
                }
              }
              return deferred.resolve(list);
            });
            return deferred.promise;
          }
        }
      };
    }
  ]);

  app.controller("appController", [
    "$scope", "Channel", function($scope, Channel) {
      var backToEpisodesList, resetLists, resetViews;
      $scope.views = {
        episodesList: true,
        episodes: false
      };
      $scope.episodesList = null;
      $scope.episodesItem = null;
      $scope.episodes = null;
      $scope.videos = null;
      $scope.loading = true;
      resetViews = function() {
        return $scope.views = {
          episodesList: true,
          episodes: false
        };
      };
      resetLists = function() {
        $scope.episodesList = null;
        $scope.episodesItem = null;
        $scope.episodes = null;
        return $scope.videos = null;
      };
      $scope.backToEpisodesList = function() {
        return backToEpisodesList();
      };
      backToEpisodesList = function() {
        $scope.loading = true;
        resetViews();
        resetLists();
        return Channel.service.episodesList().then(function(episodesList) {
          $scope.loading = false;
          return $scope.episodesList = episodesList;
        });
      };
      backToEpisodesList();
      return $scope.goToEpisodes = function(episodeItem) {
        $scope.loading = true;
        $scope.views = {
          episodesList: false,
          episodes: true
        };
        $scope.episodeItem = episodeItem;
        return Channel.service.episodes(episodeItem).then(function(episodes) {
          $scope.loading = false;
          return $scope.episodes = episodes;
        });
      };
    }
  ]);

  app.directive("episodeVideos", [
    function() {
      return {
        restrict: "E",
        scope: {
          episode: "="
        },
        transclude: true,
        templateUrl: "videos.html",
        controller: [
          "$scope", "Channel", function($scope, Channel) {
            $scope.videos = [];
            return Channel.service.videos($scope.episode).then(function(videos) {
              return $scope.videos = videos;
            });
          }
        ]
      };
    }
  ]);

}).call(this);
